<?php
/* ------------------------------
 *      XMLSF Admin CLASS
 * ------------------------------ */

class XMLSitemapFeed_Admin extends XMLSitemapFeed {

	/**
	 * Static files conflicting with this plugin
	 * @var array
	 */
	private $static_files = array();

	/**
	* SETTINGS
	*/

	// TODO refer to support forum + invite plugin rating !

	/**
	 * Sitemaps
	 * settings field
	 */
	public function sitemaps_settings_field() {
		$options = parent::get_sitemaps();

		echo '<fieldset id="xmlsf_sitemaps"><legend class="screen-reader-text">'.__('XML Sitemaps','xml-sitemap-feed').'</legend>
			<label><input type="checkbox" name="'.$this->prefix.'sitemaps[sitemap]" id="xmlsf_sitemaps_index" value="sitemap.xml" '.checked(isset($options['sitemap']), true, false).' /> '.__('XML Sitemap Index','xml-sitemap-feed').'</label>';//xmlsf
		if (isset($options['sitemap']))
			echo '<span class="description"> &nbsp;&ndash;&nbsp; <a href="#xmlsf" id="xmlsf_link">'.translate('Settings').'</a> &nbsp;&ndash;&nbsp; <a href="'.trailingslashit(get_bloginfo('url')). ( $this->plain_permalinks() ? '?feed=sitemap' : $options['sitemap'] ) .'" target="_blank">'.translate('View').'</a></span>';

		echo '<br>
			<label><input type="checkbox" name="'.$this->prefix.'sitemaps[sitemap-news]" id="xmlsf_sitemaps_news" value="sitemap-news.xml" '.checked(isset($options['sitemap-news']), true, false).' /> '.__('Google News Sitemap','xml-sitemap-feed').'</label>';
		if (isset($options['sitemap-news']))
			echo '<span class="description"> &nbsp;&ndash;&nbsp; <a href="#xmlnf" id="xmlnf_link">'.translate('Settings').'</a> &nbsp;&ndash;&nbsp; <a href="'.trailingslashit(get_bloginfo('url')). ( $this->plain_permalinks() ? '?feed=sitemap-news' : $options['sitemap-news'] ) .'" target="_blank">'.translate('View').'</a></span>';

		echo '
		</fieldset>';
		echo '
    <script type="text/javascript">
        jQuery( document ).ready( function() {
            jQuery( "#xmlsf_link" ).click( function(event) {
	     	        event.preventDefault();
	     	        jQuery("html, body").animate({
			  scrollTop: jQuery("a[name=\'xmlsf\']").offset().top - 30
			}, 1000);
	    });
            jQuery( "#xmlnf_link" ).click( function(event) {
	     	        event.preventDefault();
	     	        jQuery("html, body").animate({
			  scrollTop: jQuery("a[name=\'xmlnf\']").offset().top - 30
			}, 1000);
	    });
        });
    </script>';
	}

	/* PINGS */

	public function ping_settings_field() {
		$options = parent::get_ping();
		$defaults = parent::defaults('ping');
		$pong = $this->get_option('pong', array());

		$names = array(
			'google' => __('Google','xml-sitemap-feed'),
			'bing' => __('Bing & Yahoo','xml-sitemap-feed')
		);

		echo '
		<fieldset id="xmlsf_ping"><legend class="screen-reader-text">'.__('Ping Services','xml-sitemap-feed').'</legend>
			';

		foreach ( $defaults as $key => $values ) {
			echo '
				<label><input type="checkbox" name="'.$this->prefix.'ping['.
				$key.'][active]" id="xmlsf_ping_'.
				$key.'" value="1"'.
				checked( !empty($options[$key]['active']), true, false).' /> ';
			echo isset($names[$key]) && !empty($names[$key]) ? $names[$key] : $key ;
			echo '</label>';

			echo ' <span class="description">';
			if (!empty($pong[$key])) {
				if ( $tzstring = get_option('timezone_string') ) {
					// use same timezoneformat as translatable examples in options-general.php
					$timezone_format = translate_with_gettext_context('Y-m-d G:i:s', 'timezone date format');
					date_default_timezone_set($tzstring);
				} else {
					$timezone_format = 'Y-m-d G:i:s T';
				}

				foreach ((array)$pong[$key] as $pretty => $data) {
					if ( !empty($data['time']) ) {
						if ( '200' == $data['code'] )
							echo ' &nbsp;&ndash;&nbsp; ' . sprintf(__('Successfully sent %1$s on %2$s.','xml-sitemap-feed'),$pretty, date($timezone_format,$data['time'])).' ';
						else
							echo ' &nbsp;&ndash;&nbsp; ' .sprintf(__('Failed to send %1$s on %2$s.','xml-sitemap-feed'),$pretty, date($timezone_format,$data['time'])).' ';
					}
				}
				date_default_timezone_set('UTC');
			}
			echo '</span><br>';
		}

		echo '
		</fieldset>';
	}

	public function sanitize_ping_settings($new) {
		$defaults = parent::defaults('ping');
		$old = parent::get_option('ping');
		$sanitized = array();

		foreach ($defaults as $key => $values) {
			if(!isset($new[$key]))
				continue;

			if ( is_array($new[$key])  ) {
				$sanitized += array( $key => $new[$key] );
			}
		}

		return $sanitized;
	}

	/* ROBOTS */

	public function robots_settings_field() {
		echo '
		<fieldset><legend class="screen-reader-text">'.__('Additional robots.txt rules','xml-sitemap-feed').'</legend>
			<label>'.sprintf(__('Rules that will be appended to the %s generated by WordPress:','xml-sitemap-feed'),'<a href="'.trailingslashit(get_bloginfo('url')).'robots.txt" target="_blank">robots.txt</a>').'<br><textarea name="'.$this->prefix.'robots" id="xmlsf_robots" class="large-text" cols="50" rows="6" />'.esc_attr( parent::get_robots() ).'</textarea></label>
			<p class="description">'.__('These rules will not have effect when you are using a static robots.txt file.','xml-sitemap-feed').'<br><span style="color: red" class="warning">'.__('Only add rules here when you know what you are doing, otherwise you might break search engine access to your site.','xml-sitemap-feed').'</span></p>
		</fieldset>';
	}

	public function reset_settings_field() {
		echo '
		<fieldset><legend class="screen-reader-text">'.__('Reset XML sitemaps','xml-sitemap-feed').'</legend>
			<label><input type="checkbox" name="'.$this->prefix.'sitemaps[reset]" value="1" onchange="if(this.checked){if(!confirm(\''.
				__('Selecting this will clear all XML Sitemap & Google News Sitemap settings after Save Changes. Are you sure?','xml-sitemap-feed').'\')){this.checked=false}}" /> '.
				__('Clear all XML Sitemap & Google News Sitemap settings.','xml-sitemap-feed').'</label>
		</fieldset>';
		echo '
		<p class="description">'.__('Check this option and Save Changes to start fresh with the default settings.','xml-sitemap-feed').'</p>';
	}

	/**
	* XML SITEMAP SECTION
	*/

	public function xml_sitemap_settings() {
		echo '<p><a target="_blank" href="https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=ravanhagen%40gmail%2ecom&item_name=XML%20Sitemap%20Feeds&item_number='.parent::$plugin_basename.'&no_shipping=0&tax=0&charset=UTF%2d8" title="'.
		sprintf(__('Donate to keep the free %s plugin development & support going!','xml-sitemap-feed'),__('XML Sitemap & Google News Feeds','xml-sitemap-feed')).'"><img src="https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif" style="border:none;float:right;margin:4px 0 0 10px" alt="'.
		sprintf(__('Donate to keep the free %s plugin development & support going!','xml-sitemap-feed'),__('XML Sitemap & Google News Feeds','xml-sitemap-feed')).'" width="92" height="26" /></a>'.
		sprintf(__('These settings control the XML Sitemaps generated by the %s plugin.','xml-sitemap-feed'),__('XML Sitemap & Google News Feeds','xml-sitemap-feed')).' '.
		sprintf(__('For ping options, go to %s.','xml-sitemap-feed'),'<a href="options-writing.php">'.translate('Writing Settings').'</a>').'</p>';
	}

	public function post_types_settings_field() {
		$options = parent::get_post_types();
		$defaults = parent::defaults('post_types');
		$do_note = false;

		$post_types = get_post_types(array('public'=>true),'objects');
		if ( !is_array($post_types) || is_wp_error($post_types) )
			return;

		echo '<fieldset id="xmlsf_post_types"><legend class="screen-reader-text">'.__('XML Sitemaps for post types','xml-sitemap-feed').'</legend>
			';
		foreach ( $post_types  as $post_type ) {
			// skip unallowed post types
			if (in_array($post_type->name,parent::disabled_post_types()))
				continue;

			$count = wp_count_posts( $post_type->name );

			echo '
				<input type="hidden" name="'.$this->prefix.'post_types['.
				$post_type->name.'][name]" value="'.
				$post_type->name.'" />';

			echo '
				<label><input type="checkbox" name="'.$this->prefix.'post_types['.
				$post_type->name.'][active]" id="xmlsf_post_types_'.
				$post_type->name.'" value="1" '.
				checked( !empty($options[$post_type->name]["active"]), true, false).' /> '.
				$post_type->label.'</label> ('.
				$count->publish.')';

			if (!empty($options[$post_type->name]['active'])) {

				echo ' &nbsp;&ndash;&nbsp; <span class="description"><a id="xmlsf_post_types_'.$post_type->name.'_link" href="#xmlsf_post_types_'.$post_type->name.'_settings">'.translate('Settings').'</a></span><br>
    <script type="text/javascript">
        jQuery( document ).ready( function() {
            jQuery("#xmlsf_post_types_'.$post_type->name.'_settings").hide();
            jQuery("#xmlsf_post_types_'.$post_type->name.'_link").click( function(event) {
            		event.preventDefault();
			jQuery("#xmlsf_post_types_'.$post_type->name.'_settings").toggle("fast");
	    });
        });
    </script>
    				<ul style="margin-left:18px" id="xmlsf_post_types_'.$post_type->name.'_settings">';


				if ( isset($defaults[$post_type->name]['archive']) ) {
					$archives = array (
								'yearly' => __('Year','xml-sitemap-feed'),
								'monthly' => __('Month','xml-sitemap-feed')
								);
					$archive = !empty($options[$post_type->name]['archive']) ? $options[$post_type->name]['archive'] : $defaults[$post_type->name]['archive'];
					echo '
					<li><label>'.__('Split by','xml-sitemap-feed').' <select name="'.$this->prefix.'post_types['.
						$post_type->name.'][archive]" id="xmlsf_post_types_'.
						$post_type->name.'_archive">
						<option value="">'.translate('None').'</option>';
					foreach ($archives as $value => $translation)
						echo '
						<option value="'.$value.'" '.
						selected( $archive == $value, true, false).
						'>'.$translation.'</option>';
					echo '</select>
					</label> <span class="description"> '.__('Choose split by month if you experience errors or slow sitemaps.','xml-sitemap-feed').'</span></li>';
				}

				$priority_val = !empty($options[$post_type->name]['priority']) ? $options[$post_type->name]['priority'] : $defaults[$post_type->name]['priority'];
				echo '
					<li><label>'.__('Priority','xml-sitemap-feed').' <input type="number" step="0.1" min="0.1" max="0.9" name="'.$this->prefix.'post_types['.
					$post_type->name.'][priority]" id="xmlsf_post_types_'.
					$post_type->name.'_priority" value="'.$priority_val.'" class="small-text"></label> <span class="description">'.__('Priority can be overridden on individual posts.','xml-sitemap-feed').'</span></li>';

				echo '
					<li><label><input type="checkbox" name="'.$this->prefix.'post_types['.
					$post_type->name.'][dynamic_priority]" value="1" '.
					checked( !empty($options[$post_type->name]['dynamic_priority']), true, false).' /> '.__('Automatic Priority calculation.','xml-sitemap-feed').'</label> <span class="description">'.__('Adjusts the Priority based on factors like age, comments, sticky post or blog page.','xml-sitemap-feed').'</span></li>';

				echo '
					<li><label><input type="checkbox" name="'.$this->prefix.'post_types['.
					$post_type->name.'][update_lastmod_on_comments]" value="1" '.
					checked( !empty($options[$post_type->name]["update_lastmod_on_comments"]), true, false).' /> '.__('Update the Last Changed date on each new comment.','xml-sitemap-feed').'</label></li>';

				$image = isset($options[$post_type->name]['tags']['image']) ? $options[$post_type->name]['tags']['image'] : $defaults[$post_type->name]['tags']['image'];
				$context = ( $post_type->name === 'page' ) ? 'page' : 'post';
				echo '
					<li><label>'.__('Add image tags for','xml-sitemap-feed').' <select name="'.$this->prefix.'post_types['.
						$post_type->name.'][tags][image]">
						<option value="">'.translate('None').'</option>
						<option value="featured" '.
						selected( $image == "featured", true, false).
						'>'.translate_with_gettext_context('Featured Image',$context).'</option>
						<option value="attached" '.
						selected( $image == "attached", true, false).
						'>'.__('Attached images','xml-sitemap-feed').'</option>
					</select></label></li>

				</ul>';
			} else {
				echo '<br>';
			}
		}

		echo '
		</fieldset>';
	}

	public function taxonomies_settings_field() {
		$taxonomies = parent::get_taxonomies();
		$taxonomy_settings = parent::get_option('taxonomy_settings');
		$active = parent::get_option('post_types');
		$output = '';

		foreach ( get_taxonomies(array('public'=>true),'objects') as $taxonomy ) {
			// skip unallowed post types
			if (in_array($taxonomy->name,parent::disabled_taxonomies()))
				continue;

			$skip = true;
			foreach ( $taxonomy->object_type as $post_type)
				if (!empty($active[$post_type]['active']) && $active[$post_type]['active'] == '1')
					$skip = false;
			if ($skip) continue; // skip if none of the associated post types are active

			$count = wp_count_terms( $taxonomy->name );
			$output .= '
				<label><input type="checkbox" name="'.$this->prefix.'taxonomies['.
				$taxonomy->name.']" id="xmlsf_taxonomies_'.
				$taxonomy->name.'" value="'.
				$taxonomy->name.'"'.
				checked(in_array($taxonomy->name,$taxonomies), true, false).' /> '.
				$taxonomy->label.'</label> ('.
				$count.') ';

//			if ( in_array($taxonomy->name,$options) && empty($taxonomy->show_tagcloud) )
//				echo '<span class="description error" style="color: red">'.__('This taxonomy type might not be suitable for public use. Please check the urls in the taxonomy sitemap.','xml-sitemap-feed').'</span>';

			$output .= '
				<br>';
		}

		if ($output) {
			echo '
		<fieldset id="xmlsf_taxonomies"><legend class="screen-reader-text">'.__('XML Sitemaps for taxonomies','xml-sitemap-feed').'</legend>
			';
			echo $output;
			echo '<span class="description"><a id="xmlsf_taxonomy_settings_link" href="#xmlsf_taxonomy_settings">'.translate('Settings').'</a></span><br>
<script type="text/javascript">
	jQuery( document ).ready( function() {
		jQuery("#xmlsf_taxonomy_settings").hide();
		jQuery("#xmlsf_taxonomy_settings_link").click( function(event) {
				event.preventDefault();
		jQuery("#xmlsf_taxonomy_settings").toggle("fast");
	});
	});
</script>
			<ul style="margin-left:18px" id="xmlsf_taxonomy_settings">
				<li><label>'.__('Priority','xml-sitemap-feed').' <input type="number" step="0.1" min="0.1" max="0.9" name="'.$this->prefix.'taxonomy_settings[priority]" id="xmlsf_taxonomy_priority" value="'.
					( isset($taxonomy_settings['priority']) ? $taxonomy_settings['priority'] : '' ) . '" class="small-text" /></label></li>
				<li><label><input type="checkbox" name="'.$this->prefix.'taxonomy_settings[dynamic_priority]" id="xmlsf_taxonomy_dynamic_priority" value="1"'.
					checked( !empty($taxonomy_settings['dynamic_priority']), true, false ) . ' />'.__('Automatic Priority calculation.','xml-sitemap-feed').'</label></li>
				<li><label>'.__('Maximum number of terms per taxonomy sitemap','xml-sitemap-feed').' <input type="number" name="'.$this->prefix.'taxonomy_settings[term_limit]" id="xmlsf_taxonomy_term_limit" value="'.
					( isset($taxonomy_settings['term_limit']) ? $taxonomy_settings['term_limit'] : '' ) . '" class="small-text" /></label> <span class="description">'.__('Set to 0 for unlimited.','xml-sitemap-feed').'</span></li>
			</ul>
		</fieldset>';
		} else {
			echo '
		<p class="description warning">'.__('No taxonomies available for the currently included post types.','xml-sitemap-feed').'</p>';
		}
	}

	public function custom_sitemaps_settings_field() {
		$lines = parent::get_custom_sitemaps();

		echo '
		<fieldset><legend class="screen-reader-text">'.__('Include custom XML Sitemaps','xml-sitemap-feed').'</legend>
			<label>'.__('Additional XML Sitemaps to append to the main XML Sitemap Index:','xml-sitemap-feed').'<br>
			<textarea name="'.$this->prefix.'custom_sitemaps" id="xmlsf_custom_sitemaps" class="large-text" cols="50" rows="4" />'. implode("\n",$lines) .'</textarea></label>
			<p class="description">'.__('Add the full URL, including protocol (http/https) and domain.','xml-sitemap-feed').' '.__('Start each URL on a new line.','xml-sitemap-feed').'<br><span style="color: red" class="warning">'.__('Only valid sitemaps are allowed in the Sitemap Index. Use your Google/Bing Webmaster Tools to verify!','xml-sitemap-feed').'</span></p>
		</fieldset>';

	}

	public function urls_settings_field() {
		$urls = parent::get_urls();
		$lines = array();

		if(!empty($urls)) {
			foreach($urls as $arr) {
				if(is_array($arr))
					$lines[] = implode(" ",$arr);
			}
		}

		echo '
		<fieldset><legend class="screen-reader-text">'.__('Include custom web pages','xml-sitemap-feed').'</legend>
			<label>'.__('Additional web pages to append in an extra XML Sitemap:','xml-sitemap-feed').'<br>
			<textarea name="'.$this->prefix.'urls" id="xmlsf_urls" class="large-text" cols="50" rows="4" />'. implode("\n",$lines) .'</textarea></label>
			<p class="description">'.__('Add the full URL, including protocol (http/https) and domain.','xml-sitemap-feed').' '.__('Optionally add a priority value between 0 and 1, separated with a space after the URL.','xml-sitemap-feed').' '.__('Start each URL on a new line.','xml-sitemap-feed').'</p>
		</fieldset>';

	}

	public function domains_settings_field() {
		$default = parent::domain();
		$domains = (array) parent::get_option('domains');

		echo '
		<fieldset><legend class="screen-reader-text">'.__('Allowed domains','xml-sitemap-feed').'</legend>
			<label>'.__('Additional domains to allow in the XML Sitemaps:','xml-sitemap-feed').'<br><textarea name="'.$this->prefix.'domains" id="xmlsf_domains" class="large-text" cols="50" rows="4" />'. implode("\n",$domains) .'</textarea></label>
			<p class="description">'.sprintf(__('By default, only the domain %s as used in your WordPress site address is allowed.','xml-sitemap-feed'),'<strong>'.$default.'</strong>').' <a href="#xmlsf_domains_note_1_more" id="xmlsf_domains_note_1_link">'.translate('Read more...').'</a><p><p id="xmlsf_domains_note_1_more" class="description">'.
			__('This means that all URLs that use another domain (custom URLs or using a plugin like Page Links To) are filtered from the XML Sitemap. However, if you are the verified owner of other domains in your Google/Bing Webmaster Tools account, you can include these in the same sitemap. Add these domains, without protocol (http/https) each on a new line. Note that if you enter a domain with www, all URLs without it or with other subdomains will be filtered.','xml-sitemap-feed').'</p>
			<script type="text/javascript">
			jQuery( document ).ready( function() {
			    jQuery("#xmlsf_domains_note_1_more").hide();
			    jQuery("#xmlsf_domains_note_1_link").click( function(event) {
				event.preventDefault();
				jQuery("#xmlsf_domains_note_1_link").hide();
				jQuery("#xmlsf_domains_note_1_more").show("fast");
			    });
			});
			</script>
		</fieldset>';

	}


	/**
	* GOOGLE NEWS SITEMAP SECTION
	*/

	public function news_sitemap_settings() {
		echo '<p><a target="_blank" href="https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=ravanhagen%40gmail%2ecom&item_name=XML%20Sitemap%20Feeds&item_number='.parent::$plugin_basename.'&no_shipping=0&tax=0&charset=UTF%2d8" title="'.
		sprintf(__('Donate to keep the free %s plugin development & support going!','xml-sitemap-feed'),__('XML Sitemap & Google News Feeds','xml-sitemap-feed')).'"><img src="https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif" style="border:none;float:right;margin:4px 0 0 10px" alt="'.
		sprintf(__('Donate to keep the free %s plugin development & support going!','xml-sitemap-feed'),__('XML Sitemap & Google News Feeds','xml-sitemap-feed')).'" width="92" height="26" /></a>'.
		sprintf(__('These settings control the Google News Sitemap generated by the %s plugin.','xml-sitemap-feed'),__('XML Sitemap & Google News Feeds','xml-sitemap-feed')).' '.
		__('When you are done configuring and preparing your news content and you are convinced your site adheres to the <a href="https://support.google.com/news/publisher/answer/40787" target="_blank">Google News guidelines</a>, go ahead and <a href="https://partnerdash.google.com/partnerdash/d/news" target="_blank">submit your site for inclusion</a>!','xml-sitemap-feed').' '.
		__('It is strongly recommended to submit your news sitemap to your Google Webmasters Tools account to monitor for warnings or errors. Read more on how to <a href="https://support.google.com/webmasters/answer/183669" target="_blank">Manage sitemaps with the Sitemaps page</a>.','xml-sitemap-feed').' '.
		sprintf(__('For ping options, go to %s.','xml-sitemap-feed'),'<a href="options-writing.php">'.translate('Writing Settings').'</a>').'</p>';

	}

	//TODO: publication name allow tag %category% ... post_types (+ exclusion per post or none + allow inclusion per post), limit to category ...
	public function news_name_field() {
		$options = parent::get_option('news_tags');

		$name = !empty($options['name']) ? $options['name'] : '';
		echo '
		<fieldset><legend class="screen-reader-text">'.__('Publication name','xml-sitemap-feed').'</legend>
			<input type="text" name="'.$this->prefix.'news_tags[name]" id="xmlsf_news_name" value="'.$name.'" class="regular-text"> <span class="description">'.sprintf(__('By default, the general %s setting will be used.','xml-sitemap-feed'),'<a href="options-general.php">'.translate('Site Title').'</a>').'</span><p class="description">' .
			__('The publication name should match the name submitted on the Google News Publisher Center. If you wish to change it, please read <a href="https://support.google.com/news/publisher/answer/40402" target="_blank">Updated publication name</a>.','xml-sitemap-feed') . '</p>
		</fieldset>';
	}

	public function news_post_type_field() {
		$defaults = parent::defaults('news_tags');
		$options = parent::get_option('news_tags');

		$news_post_type = isset($options['post_type']) && !empty($options['post_type']) ? $options['post_type'] : $defaults['post_type'];

		$post_types = get_post_types(array('public' =>true),'objects');

		// check for valid post types
		if ( !is_array($post_types) || empty($post_types) || is_wp_error($post_types) ) {
			echo '
			<p style="color: red" class="error">'.__('Error: There where no valid post types found. Without at least one public post type, a Google News Sitemap cannot be created by this plugin. Please deselect the option Google News Sitemap at <a href="#xmlsf_sitemaps">Enable XML sitemaps</a> and choose another method.','xml-sitemap-feed').'</p>';
		} else {
			echo '
			<fieldset><legend class="screen-reader-text">'.__('Include post types','xml-sitemap-feed').'</legend>';

			foreach ( $post_types as $post_type ) {
				// skip unallowed post types
				if ( !is_object($post_type) || in_array($post_type->name,parent::disabled_post_types('news')) )
					continue;

				$checked = in_array($post_type->name,$news_post_type) ? true : false;
				$disabled = false;
				if ( isset($options['categories']) && is_array($options['categories']) ) {
					// need to disable all post types that do not have the category taxonomy
					$taxonomies = get_object_taxonomies($post_type->name,'names');
					if ( !in_array('category',(array)$taxonomies) ) {
						$disabled = true;
						$checked = false;
					}
				}

				echo '
				<label><input type="checkbox" name="'.$this->prefix.'news_tags[post_type][]" id="xmlsf_post_type_'.
					$post_type->name.'" value="'.$post_type->name.'" '.
					checked( $checked, true, false ).' '.
					disabled( $disabled, true, false ).' /> '.
					$post_type->label.'</label><br>';
			}
			echo '
				<p class="description">'.sprintf(__('At least one post type must be selected. By default, the post type %s will be used.','xml-sitemap-feed'),translate('Posts')).'</p>
			</fieldset>';
		}

	}

	public function news_categories_field() {
		$options = parent::get_option('news_tags');

		if ( !empty($options['post_type']) && array( 'post' ) !== (array)$options['post_type'] )	{
			echo '
			<p class="description">' . sprintf(__('Selection based on categories will be available when <strong>only</strong> the post type %s is included above.','xml-sitemap-feed'),translate('Posts')) . '</p>';
			return;
		}

		$all_categories = get_terms( 'category', array('hide_empty' => 0,'hierachical' => true) );
		$selected_categories = isset($options['categories']) && is_array($options['categories']) ? $options['categories'] : array();
		$count = count($all_categories);

		if ($count==0) {
			echo '
			<p class="description">' . translate('No categories') . '</p>';
			return;
		} else {
			echo '
			<fieldset><legend class="screen-reader-text">'.translate('Categories').'</legend>';

			$size = $count < 15 ? $count : 15;
			echo '
				<label>'.__('Limit to posts in these post categories:','xml-sitemap-feed').'<br>
					<select multiple name="'.$this->prefix.'news_tags[categories][]" size="'.$size.'">';

			foreach($all_categories as $category) {
				$depth = count( explode( '%#%', get_category_parents($category, false, '%#%') ) ) - 2;
				$pad = str_repeat('&nbsp;', $depth * 3);

				$cat_name = apply_filters('list_cats', $category->name, $category);
				echo '
						<option class="depth-'.$depth.'" value="'.$category->term_id.'" '.
						selected( in_array($category->term_id,$selected_categories), true, false ).
						'>'.$pad.$cat_name.'</option>';
			}
			echo '
					</select>
				</label>
				<p class="description">'.__('If you wish to limit posts that will feature in your News Sitemap to certain categories, select them here. If no categories are selected, posts of all categories will be included in your News Sitemap.','xml-sitemap-feed').
				' '.__('Use the Ctrl/Cmd key plus click to select more than one or to deselect.','xml-sitemap-feed');
			echo '
			</fieldset>';
		}
	}

	public function news_image_field() {
		$options = parent::get_option('news_tags');

		$image = !empty($options['image']) ? $options['image'] : '';
		echo '
		<fieldset><legend class="screen-reader-text">'.translate('Images').'</legend>
			<label>'.__('Add image tags for','xml-sitemap-feed').' <select name="'.$this->prefix.'news_tags[image]">
				<option value="">'.translate('None').'</option>
				<option value="featured" '.
				selected( $image == "featured", true, false).
				'>'.translate_with_gettext_context('Featured Image','post').'</option>
				<option value="attached" '.
				selected( $image == "attached", true, false).
				'>'.__('Attached images','xml-sitemap-feed').'</option>
				';
		echo '</select></label>
			<p class="description">'.__('Note: Google News prefers at most one image per article in the News Sitemap. If multiple valid images are specified, the crawler will have to pick one arbitrarily. Images in News Sitemaps should be in jpeg or png format.','xml-sitemap-feed').' '.sprintf(__('Read more on %s.','xml-sitemap-feed'),'<a href="https://support.google.com/news/publisher/answer/13369" target="_blank">'.__('Prevent missing or incorrect images','xml-sitemap-feed').'</a>').'</p>
		</fieldset>';
	}

	public function news_labels_field() {
		echo '
		<fieldset id="xmlsf_news_labels"><legend class="screen-reader-text">' . __('Source labels','xml-sitemap-feed') . '</legend>
			<p>' . __('Source labels provide more information about the content of your articles.','xml-sitemap-feed') . ' ' .
			__('The FactCheck label may only be applied if you publish stories with fact-checking content that\'s indicated by schema.org ClaimReview markup.','xml-sitemap-feed').' '.sprintf(__('Read more about source labels on %s','xml-sitemap-feed'),'<a href="https://support.google.com/news/publisher/answer/4582731" target="_blank">'.__('What does each source label mean?','xml-sitemap-feed').'</a>') . '</p>';

		$options = parent::get_option('news_tags');

		// genres tag
		$gn_translations = array(
			'PressRelease' => __('PressRelease','xml-sitemap-feed'),
			'Satire' => __('Satire','xml-sitemap-feed'),
			'Blog' => __('Blog','xml-sitemap-feed'),
			'OpEd' => __('OpEd','xml-sitemap-feed'),
			'Opinion' => __('Opinion','xml-sitemap-feed'),
			'UserGenerated' => __('UserGenerated','xml-sitemap-feed'),
			'FactCheck' => __('FactCheck','xml-sitemap-feed')
		);
		$genres = !empty($options['genres']) ? $options['genres'] : array();
		$genres_default = !empty($genres['default']) ? (array)$genres['default'] : array();

		echo '
		  <fieldset id="xmlsf_news_labels_genres"><legend class="screen-reader-text">&lt;genres&gt;</legend>
			<ul>
				<li><label>'.__('Default genre:','xml-sitemap-feed').'<br><select multiple name="'.$this->prefix.'news_tags[genres][default][]" id="xmlsf_news_tags_genres_default" size="'.count($this->gn_genres).'">';
		foreach ( $this->gn_genres as $name ) {
			echo '<option value="'.$name.'" '.selected( in_array($name,$genres_default), true, false ).'>' . ( isset($gn_translations[$name]) && !empty($gn_translations[$name]) ? $gn_translations[$name] : $name ) . '&nbsp;</option>';
    	}
		echo '
				</select></label></li>
			</ul>
			<p class="description">'.__('Use the Ctrl/Cmd key plus click to select more than one or to deselect.','xml-sitemap-feed').'</p>
		</fieldset>';
	}

	//sanitize callback functions

	public function sanitize_robots_settings($new) {
		// clean up input
		if(is_array($new)) {
		  $new = array_filter($new);
		  $new = reset($new);
		}
		return trim(strip_tags($new));
	}

	public function sanitize_sitemaps_settings($new) {
		$old = parent::get_sitemaps();

		if ( isset($new['reset']) && $new['reset'] == '1' ) {// if reset is checked, set transient to clear all settings
			set_transient('xmlsf_clear_settings','');
		} elseif ( $old != $new ) {// when sitemaps are added or removed, set transient to flush rewrite rules
			set_transient('xmlsf_flush_rewrite_rules','');

			if ( empty($old['sitemap-news']) && !empty($new['sitemap-news']) )
				set_transient('xmlsf_create_genres','');
		}

		return $new;
	}

	public function sanitize_post_types_settings( $new = array() ) {
		$old = parent::get_post_types();
		$defaults = parent::defaults('post_types');
		$sanitized = $new;

		foreach ($new as $post_type => $settings) {
			// when post types are (de)activated, set transient to flush rewrite rules
			if ( ( !empty($old[$post_type]['active']) && empty($settings['active']) ) || ( empty($old[$post_type]['active']) && !empty($settings['active']) ) )
				set_transient('xmlsf_flush_rewrite_rules','');

			if ( isset($settings['priority']) && is_numeric($settings['priority']) )
				$sanitized[$post_type]['priority'] = $this->sanitize_priority($settings['priority'],0.1,0.9);
			else
				$sanitized[$post_type]['priority'] = $defaults[$post_type]['priority'];
		}

		return $sanitized;
	}

	private function sanitize_priority($priority, $min = 0.0, $max = 1.0) {
			$priority = floatval(str_replace(",",".",$priority));
			if ($priority <= (float)$min)
				return number_format($min,1);
			elseif ($priority >= (float)$max)
				return number_format($max,1);
			else
				return number_format($priority,1);
	}

	public function sanitize_taxonomies_settings($new) {
		$old = parent::get_taxonomies();

		if ($old != $new) // when taxonomy types are added or removed, set transient to flush rewrite rules
			set_transient('xmlsf_flush_rewrite_rules','');

		return $new;
	}

	public function sanitize_taxonomy_settings_settings($new) {
		$defaults = parent::defaults('taxonomy_settings');
		$sanitized = array();

		$sanitized['term_limit'] = isset($new['term_limit']) ? intval($new['term_limit']) : $defaults['term_limit'];
		$sanitized['priority'] = isset($new['priority']) && is_numeric($new['priority']) ? $this->sanitize_priority($new['priority'], 0.1, 0.9) : $defaults['priority'];
		$sanitized['dynamic_priority'] = !empty($new['dynamic_priority']) ? '1' : '';

		return $sanitized;
	}

	public function sanitize_custom_sitemaps_settings($new) {
		$old = parent::get_custom_sitemaps();

		// clean up input
		if(is_array($new)) {
			$new = array_filter($new);
			$new = reset($new);
		}
		$input = $new ? explode("\n",trim(strip_tags($new))) : array();

		// build sanitized output
		$sanitized = array();
		foreach ($input as $line) {
			$line = filter_var(esc_url(trim($line)),FILTER_VALIDATE_URL,FILTER_FLAG_PATH_REQUIRED);
			if(!empty($line))
				$sanitized[] = $line;
		}

		return $sanitized;
	}

	public function sanitize_urls_settings($new) {
		$old = parent::get_urls();

		// clean up input
		if(is_array($new)) {
		  $new = array_filter($new);
		  $new = reset($new);
		}
		$input = $new ? explode("\n",trim(strip_tags($new))) : array();

		// build sanitized output
		$sanitized = array();

		foreach ($input as $line) {
			if(empty($line))
				continue;

			$arr = array_values(array_filter(explode(" ",trim($line)),array($this,'sanitize_urls_array_filter')));

			if(isset($arr[0])) {
				if(isset($arr[1]))
					$arr[1] = $this->sanitize_priority($arr[1]);
				else
					$arr[1] = '0.5';

				$sanitized[] = array( esc_url($arr[0]) , $arr[1] );
			}
		}

		if (empty($old)) {
			if (!empty($sanitized))
				set_transient('xmlsf_flush_rewrite_rules','');
		} else if (empty($sanitized)) {
			set_transient('xmlsf_flush_rewrite_rules','');
		}

		return (!empty($sanitized)) ? $sanitized : '';
	}

	public function sanitize_urls_array_filter( $url ) {
		return filter_var( $url, FILTER_VALIDATE_URL ) || is_numeric( $url );
	}

	public function sanitize_domains_settings($new) {
		$default = parent::domain();

		// clean up input
		if(is_array($new)) {
		  $new = array_filter($new);
		  $new = reset($new);
		}
		$input = $new ? explode("\n",trim(strip_tags($new))) : array();

		// build sanitized output
		$sanitized = array();
		foreach ($input as $line) {
			$line = trim($line);
			$parsed_url = parse_url(trim(filter_var($line,FILTER_SANITIZE_URL)));
			// Before PHP version 5.4.7, parse_url will return the domain as path when scheme is omitted so we do:
			if ( !empty($parsed_url['host']) ) {
				$domain = trim( $parsed_url['host'] );
			} else {
				$domain_arr = explode('/', $parsed_url['path']);
				$domain_arr = array_filter($domain_arr);
				$domain = array_shift( $domain_arr );
				$domain = trim( $domain );
			}

			// filter out empties and default domain
			if(!empty($domain) && $domain !== $default && strpos($domain,".".$default) === false)
				$sanitized[] = $domain;
		}

		return (!empty($sanitized)) ? $sanitized : '';
	}

	public function sanitize_news_tags_settings($new) {
		// TODO default post type : to 'post' when none are selected
		return $new;
	}


	// action links

	public function add_action_link( $links ) {
		$settings_link = '<a href="' . admin_url('options-reading.php') . '#blog_public">' . translate('Settings') . '</a>';
		array_unshift( $links, $settings_link );
		return $links;
	}

	/**
	* META BOXES
	*/

	/* Adds a XML Sitemap box to the side column */
	public function add_meta_box () {
		foreach ( parent::get_post_types() as $post_type ) {
			// Only include metaboxes on post types that are included
			if (isset($post_type["active"]))
				add_meta_box(
					'xmlsf_section',
					__( 'XML Sitemap', 'xml-sitemap-feed' ),
					array($this,'meta_box'),
					$post_type['name'],
					'side',
					'low'
				);
		}
	}

	public function meta_box($post) {
		// Use nonce for verification
		wp_nonce_field( parent::$plugin_basename, 'xmlsf_sitemap_nonce' );

		// The actual fields for data entry
		// Use get_post_meta to retrieve an existing value from the database and use the value for the form
		$exclude = get_post_meta( $post->ID, '_xmlsf_exclude', true );
		$priority = get_post_meta( $post->ID, '_xmlsf_priority', true );
		$disabled = false;

		// disable options and (visibly) set excluded to true for private posts
		if ( 'private' == $post->post_status ) {
			$disabled = true;
			$exclude = true;
		}

		// disable options and (visibly) set priority to 1 for front page
		if ( $post->ID == get_option('page_on_front') ) {
			$disabled = true;
			$exclude = false;
			$priority = '1'; // force priority to 1 for front page
		}

		echo '<p><label>';
		_e('Priority','xml-sitemap-feed');
		echo ' <input type="number" step="0.1" min="0" max="1" name="xmlsf_priority" id="xmlsf_priority" value="'.
			$priority.'" class="small-text" '.
			disabled( $disabled, true, false ).'></label> <span class="description">';
		printf(__('Leave empty for automatic Priority as configured on %1$s > %2$s.','xml-sitemap-feed'),translate('Settings'),'<a href="' . admin_url('options-reading.php') . '#xmlsf">' . translate('Reading') . '</a>');
		echo '</span></p>';

		echo '<p><label><input type="checkbox" name="xmlsf_exclude" id="xmlsf_exclude" value="1" '.
			checked(!empty($exclude), true, false).
			disabled( $disabled, true, false ).'> ';
		_e('Exclude from XML Sitemap','xml-sitemap-feed');
		echo '</label></p>';
	}

	/* Adds a News Sitemap box to the side column */
	public function add_meta_box_news () {
		$news_tags = parent::get_option('news_tags');
		$defaults = parent::defaults('news_tags');
		$news_post_type = isset($news_tags['post_type']) && !empty($news_tags['post_type']) ? $news_tags['post_type'] : $defaults['post_type'];

		foreach ( (array)$news_post_type as $post_type ) {
      // Only include metabox on post types that are included
			add_meta_box(
				'xmlsf_news_section',
				__( 'Google News', 'xml-sitemap-feed' ),
				array($this,'meta_box_news'),
				$post_type,
				'side'
			);
		}
	}

	public function meta_box_news($post) {
		// Use nonce for verification
		wp_nonce_field( parent::$plugin_basename, 'xmlsf_sitemap_nonce' );

		// The actual fields for data entry
		// Use get_post_meta to retrieve an existing value from the database and use the value for the form
		$exclude = get_post_meta( $post->ID, '_xmlsf_news_exclude', true );

		echo '<p><label><input type="checkbox" name="xmlsf_news_exclude" id="xmlsf_news_exclude" value="1"'.
			checked('private' == $post->post_status || !empty($exclude), true, false).
			disabled('private' == $post->post_status, true, false).'> ';
		_e('Exclude from Google News Sitemap.','xml-sitemap-feed');
		echo '</label></p>';
	}

	/* When the post is saved, save our meta data */
	function save_metadata( $post_id ) {
		if ( !isset($post_id) )
			$post_id = (int)$_REQUEST['post_ID'];

		if ( !current_user_can( 'edit_post', $post_id ) || !isset($_POST['xmlsf_sitemap_nonce']) || !wp_verify_nonce($_POST['xmlsf_sitemap_nonce'], parent::$plugin_basename) )
			return;

		// _xmlsf_priority
		if ( isset($_POST['xmlsf_priority']) && is_numeric($_POST['xmlsf_priority']) ) {
			update_post_meta($post_id, '_xmlsf_priority', $this->sanitize_priority($_POST['xmlsf_priority']) );
		} else {
			delete_post_meta($post_id, '_xmlsf_priority');
		}

		// _xmlsf_exclude
		if ( isset($_POST['xmlsf_exclude']) && $_POST['xmlsf_exclude'] != '' ) {
			update_post_meta($post_id, '_xmlsf_exclude', $_POST['xmlsf_exclude']);
		} else {
			delete_post_meta($post_id, '_xmlsf_exclude');
		}

		// _xmlsf_news_exclude
		if ( isset($_POST['xmlsf_news_exclude']) && $_POST['xmlsf_news_exclude'] != '' ) {
			update_post_meta($post_id, '_xmlsf_news_exclude', $_POST['xmlsf_news_exclude']);
		} else {
			delete_post_meta($post_id, '_xmlsf_news_exclude');
		}
	}

	/**
	 * Catch transient flags
	 */

	function handle_flags() {
		// CATCH TRANSIENT for reset
		if ( delete_transient('xmlsf_clear_settings') ) {
			$this->clear_settings();
		}

		// CATCH TRANSIENT for flushing rewrite rules after the sitemaps setting has changed
		if ( delete_transient('xmlsf_flush_rewrite_rules') ) {
			$this->flush_rules();
		}

		// CATCH TRANSIENT for recreating terms
		if ( delete_transient('xmlsf_create_genres') && taxonomy_exists('gn-genre') ) {

			// check and update existing or delete not allowed terms
			$terms = get_terms( 'gn-genre', array('hide_empty' => false) );
			if ( is_array($terms) && !empty($terms) ) {
				foreach ( $terms as $term ) {
					if ( in_array($term->name,$this->gn_genres) ) {
						$slug = strtolower($term->name);
						if ( $term->slug !== $slug )
							wp_update_term( $term->term_id, 'gn-genre', array(
								'slug' => $slug
							) );
					} else {
						wp_delete_term( $term->term_id, 'gn-genre' );
					}
				}
			}

			// add any new ones
			foreach ($this->gn_genres as $name) {
				wp_insert_term(	$name, 'gn-genre' );
			}
		}
	}

	/**
	 * Flush rules
	 *
	 * @param bool|false $hard
	 */
	public function flush_rules( $hard = false ) {

		flush_rewrite_rules($hard);

		if ( defined('WP_DEBUG') && WP_DEBUG ) {
			error_log('XML Sitemap Feeds rewrite rules flushed');
		}
	}

	/**
	 * Register settings and add settings fields
	 */

	function register_settings() {
		$sitemaps = parent::get_sitemaps();

		// sitemaps
		register_setting('reading', $this->prefix.'sitemaps', array($this,'sanitize_sitemaps_settings') );
		add_settings_field($this->prefix.'sitemaps', __('Enable XML sitemaps','xml-sitemap-feed'), array($this,'sitemaps_settings_field'), 'reading');

		// robots rules only when permalinks are set
		$rules = get_option( 'rewrite_rules' );
		if( ! $this->plain_permalinks() && isset( $rules['robots\.txt$'] ) ) {
			register_setting('reading', $this->prefix.'robots', array($this,'sanitize_robots_settings') );
			add_settings_field($this->prefix.'robots', __('Additional robots.txt rules','xml-sitemap-feed'), array($this,'robots_settings_field'), 'reading');
		}

		add_settings_field($this->prefix.'reset', __('Reset XML sitemaps','xml-sitemap-feed'), array($this,'reset_settings_field'), 'reading');

		if ( isset($sitemaps['sitemap-news']) ) {
			// XML SITEMAP SETTINGS
			add_settings_section('news_sitemap_section', '<a name="xmlnf"></a>'.__('Google News Sitemap','xml-sitemap-feed'), array($this,'news_sitemap_settings'), 'reading');
			// tags
			register_setting('reading', $this->prefix.'news_tags', array($this,'sanitize_news_tags_settings') );
			add_settings_field($this->prefix.'news_name', '<label for="xmlsf_news_name">'.__('Publication name','xml-sitemap-feed').'</label>', array($this,'news_name_field'), 'reading', 'news_sitemap_section');
			add_settings_field($this->prefix.'news_post_type', __('Include post types','xml-sitemap-feed'), array($this,'news_post_type_field'), 'reading', 'news_sitemap_section');
			add_settings_field($this->prefix.'news_categories', translate('Categories'), array($this,'news_categories_field'), 'reading', 'news_sitemap_section');
			add_settings_field($this->prefix.'news_image', translate('Images'), array($this,'news_image_field'), 'reading', 'news_sitemap_section');
			add_settings_field($this->prefix.'news_labels', __('Source labels','xml-sitemap-feed'), array($this,'news_labels_field'), 'reading', 'news_sitemap_section');
      		// post meta box
      		add_action( 'add_meta_boxes', array($this,'add_meta_box_news') );
		}

		if ( isset($sitemaps['sitemap']) ) {
			// XML SITEMAP SETTINGS
			add_settings_section('xml_sitemap_section', '<a name="xmlsf"></a>'.__('XML Sitemap','xml-sitemap-feed'), array($this,'xml_sitemap_settings'), 'reading');
			// post_types
			register_setting('reading', $this->prefix.'post_types', array($this,'sanitize_post_types_settings') );
			add_settings_field($this->prefix.'post_types', __('Include post types','xml-sitemap-feed'), array($this,'post_types_settings_field'), 'reading', 'xml_sitemap_section');
			// taxonomies
			register_setting('reading', $this->prefix.'taxonomies', array($this,'sanitize_taxonomies_settings') );
			register_setting('reading', $this->prefix.'taxonomy_settings', array($this,'sanitize_taxonomy_settings_settings') );
			add_settings_field($this->prefix.'taxonomies', __('Include taxonomies','xml-sitemap-feed'), array($this,'taxonomies_settings_field'), 'reading', 'xml_sitemap_section');
			// custom domains
			register_setting('reading', $this->prefix.'domains', array($this,'sanitize_domains_settings') );
			add_settings_field($this->prefix.'domains', __('Allowed domains','xml-sitemap-feed'), array($this,'domains_settings_field'), 'reading', 'xml_sitemap_section');
			// custom urls
			register_setting('reading', $this->prefix.'urls', array($this,'sanitize_urls_settings') );
			add_settings_field($this->prefix.'urls', __('Include custom web pages','xml-sitemap-feed'), array($this,'urls_settings_field'), 'reading', 'xml_sitemap_section');
			// custom sitemaps
			register_setting('reading', $this->prefix.'custom_sitemaps', array($this,'sanitize_custom_sitemaps_settings') );
			add_settings_field($this->prefix.'custom_sitemaps', __('Include custom XML Sitemaps','xml-sitemap-feed'), array($this,'custom_sitemaps_settings_field'), 'reading', 'xml_sitemap_section');
			// post meta box
			add_action( 'add_meta_boxes', array($this,'add_meta_box') );
		}

		if ( isset($sitemaps['sitemap']) || isset($sitemaps['sitemap-news']) ) {
			register_setting('writing', $this->prefix.'ping', array($this,'sanitize_ping_settings') );
			add_settings_field($this->prefix.'ping', __('Ping Services','xml-sitemap-feed'), array($this,'ping_settings_field'), 'writing');

	        // save post meta box settings
	        add_action( 'save_post', array($this,'save_metadata') );
		}
	}

	/**
	 * Check for static sitemap files
	 */
	public function check_static_files() {
		if ( !current_user_can( 'manage_options' ) ) return;

		if ( !is_multisite() || is_main_site() || is_network_admin() ) {
			$home_path = trailingslashit( get_home_path() );
			$check_for = $this->get_sitemaps();
			if ( !empty($this->get_option('robots')) )
				$check_for['robots'] = 'robots.txt';

			foreach ( $check_for as $name => $pretty ) {
				if ( file_exists( $home_path . $pretty ) ) {
					$this->files[] = $home_path . $pretty;
				}
			}

			if ( !empty($this->files) ) {
				add_action( 'admin_notices', array($this,'static_files_admin_notice') );
			}
		}

	}

	public function static_files_admin_notice() {
		// TODO admin message about static files: ;
		// with option to ignore or delete files or check again...
		$number = count($this->files);
		echo '<div class="notice notice-warning fade is-dismissible">';
		echo '<p><strong>' . __('XML Sitemap & Google News Feeds','xml-sitemap-feed') . '</strong> ' .
		sprintf( _n(
			'The following conflicting static file has been detected. Either remove it or disable the corresponding plugin setting.',
			'The following %s conflicting static files have been detected. Either remove them or disable the corresponding settings.',
			$number,'xml-sitemap-feed'), number_format_i18n($number) ) . '</p>';
		echo '<ul><li>' . implode('</li><li>',$this->files) . '</li></ul>';
		echo '</div>';
	}

	/**
	 * INIT
	 */

	function init() {

		$this->handle_flags();

		$this->register_settings();

		$this->check_static_files();

	}

	/**
	 * CONSTRUCTOR
	 */

	function __construct() {

		// ACTION LINK
		add_filter( 'plugin_action_links_' . parent::$plugin_basename, array($this, 'add_action_link') );

		// REGISTER SETTINGS, SETTINGS FIELDS...
		add_action( 'admin_init', array($this,'init'), 0 );

	}

}
